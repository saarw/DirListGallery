{"version":3,"sources":["App.tsx","reportWebVitals.js","index.tsx"],"names":["Gallery","props","useState","images","setImages","pagePath","window","location","pathname","endsWith","substring","length","useEffect","galleryPath","undefined","fetch","then","rsp","status","text","page","lcPage","toLowerCase","n","indexOf","before","Math","max","lastIndexOf","image","push","parseFileListing","Error","dirPath","map","imgName","catch","err","console","log","statusText","className","imagePath","src","App","render","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"2OAkBA,SAASA,EAAQC,GAEb,IAAD,EAC2BC,qBAD3B,mBACMC,EADN,KACcC,EADd,KAEGC,EAAWC,OAAOC,SAASC,SAiC/B,OA/BAH,EAAWA,EAASI,SAAS,KAAOJ,EAASK,UAAU,EAAGL,EAASM,OAAS,GAAKN,EACjFO,qBAAU,WACJX,EAAMY,aACRT,OAAUU,GACVC,MAAMV,EAAWJ,EAAMY,aACpBG,MAAK,SAACC,GACa,KAAdA,EAAIC,OACND,EAAIE,OAAOH,MAAK,SAAAG,GACd,IAAIhB,EA5BlB,SAA0BiB,GAKxB,IAJA,IAAMjB,EAAwB,GACxBkB,EAASD,EAAKE,cAChBC,GAAK,GAEDA,EAAIF,EAAOG,QAAQ,QAASD,EAAE,KAAO,GAAG,CAC9C,IAAIE,EAASC,KAAKC,IAAIP,EAAKQ,YAAY,IAAKL,GAAIH,EAAKQ,YAAY,IAAKL,IAClEM,EAAQT,EAAKV,UAAUe,EAAS,EAAGF,EAAI,OAAOZ,QAClDR,EAAO2B,KAAKD,GAGd,OAAO1B,EAiBkB4B,CAAiBZ,GAC9B,GAAyB,MAArBlB,EAAMY,YAAqB,MAAMmB,MAAM,iBAC3C,IAAMC,EAAU5B,GAAYJ,EAAMY,YAAYJ,SAAS,KAAOR,EAAMY,YAAcZ,EAAMY,YAAc,KACtGT,EAAUD,EAAO+B,KAAI,SAAAC,GACnB,OAAOF,EAAUE,SAGpBC,OAAM,SAACC,GACNC,QAAQC,IAAI,6BAA8BF,GAC1CjC,EAAU,OAGZkC,QAAQC,IAAI,yBAA2BtB,EAAIC,OAAS,IAAMD,EAAIuB,eAGjEJ,OAAM,SAACC,GACNC,QAAQC,IAAI,sBAAuBF,GACnCjC,EAAU,QAGdA,EAAU,MAEX,CAACH,EAAMY,cACH,qBAAK4B,UAAU,eAAf,SACM,MAAVtC,EAAiB,aAAeA,EAAO+B,KAAI,SAACQ,GAAD,OAAe,qBAAqBD,UAAU,gBAAgBE,IAAKD,GAA1CA,QAiB1DE,MAbf,WACE,OACE,sBAAKH,UAAU,MAAf,UACE,wBAAQA,UAAU,eAElB,qBAAKA,UAAU,WAAf,SACA,cAAC,IAAD,CAAOI,OAAQ,SAAC5C,GAAD,OAAW,cAACD,EAAD,CAASa,YAAaZ,EAAMM,SAASC,oB,QCtDtDsC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBhC,MAAK,YAAkD,IAA/CiC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCAdO,IAAST,OACP,cAAC,IAAMU,WAAP,UACE,cAAC,IAAD,UAAY,cAAC,EAAD,QAEdC,SAASC,eAAe,SAM1BX,M","file":"static/js/main.ec21e1ca.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Route } from 'react-router-dom';\nimport './App.css';\n\nfunction parseFileListing(page: string): Array<string> {\n  const images: Array<string> = [];\n  const lcPage = page.toLowerCase();\n  let n = -1;\n  // Find images in quotes, \"imagename.jpg\"\n  while ((n = lcPage.indexOf('.jpg\"', n+1)) >= 0) {\n    let before = Math.max(page.lastIndexOf('\"', n), page.lastIndexOf('/', n));\n    let image = page.substring(before + 1, n + '.jpg'.length);\n    images.push(image);\n  }\n  \n  return images;\n}\n\nfunction Gallery(props: {\n  galleryPath?: string;\n}) {\n  const [images, setImages] = useState<Array<string>>();\n  let pagePath = window.location.pathname;\n  // router paths always start with / so get rid of ending slash at page path\n  pagePath = pagePath.endsWith('/') ? pagePath.substring(0, pagePath.length - 1) : pagePath;\n  useEffect(() => {\n    if (props.galleryPath) {\n      setImages(undefined);\n      fetch(pagePath + props.galleryPath)\n        .then((rsp) => {\n          if (rsp.status == 200) {\n            rsp.text().then(text => {\n              var images = parseFileListing(text);\n              if (props.galleryPath == null) throw Error(\"Path expected\");\n              const dirPath = pagePath + (props.galleryPath.endsWith('/') ? props.galleryPath : props.galleryPath + '/');\n              setImages(images.map(imgName => {\n                return dirPath + imgName;\n              }));\n            })\n            .catch((err) => {\n              console.log('Error reading page content', err);\n              setImages([]);\n            })\n          } else {\n            console.log('Error fetch response: ' + rsp.status + ' ' + rsp.statusText);\n          }\n        })\n        .catch((err) => {\n          console.log('Error fetching page', err);\n          setImages([]);\n        });\n    } else {\n      setImages([]);\n    }\n  }, [props.galleryPath]);\n  return <div className=\"Gallery-main\">\n    {images == null ? 'Loading...' : images.map((imagePath) => <img key={imagePath} className=\"Gallery-image\" src={imagePath}></img>)}\n  </div>;\n}\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n      </header>\n      <div className=\"App-body\">\n      <Route render={(props) => <Gallery galleryPath={props.location.pathname}></Gallery>}>\n      </Route>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { HashRouter } from 'react-router-dom';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter><App /></HashRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}